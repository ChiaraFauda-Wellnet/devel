<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Language\Language;
use Drupal\field\Field;

/**
 * Implements hook_menu().
 */
function devel_generate_menu() {
  $items = array();

  $items['admin/config/development/generate/user'] = array(
    'title' => 'Generate users',
    'description' => 'Generate a given number of users. Optionally delete current users.',
    'route_name' => 'devel_generate.user',
  );
  $items['admin/config/development/generate/content'] = array(
    'title' => 'Generate content',
    'description' => 'Generate a given number of nodes and comments. Optionally delete current items.',
    'route_name' => 'devel_generate.content',
  );
  if (module_exists('taxonomy')) {
    $items['admin/config/development/generate/taxonomy'] = array(
      'title' => 'Generate terms',
      'description' => 'Generate a given number of terms. Optionally delete current terms.',
      'route_name' => 'devel_generate.taxonomy_term',
    );
    $items['admin/config/development/generate/vocabs'] = array(
      'title' => 'Generate vocabularies',
      'description' => 'Generate a given number of vocabularies. Optionally delete current vocabularies.',
      'route_name' => 'devel_generate.vocabulary',
    );
  }
  $items['admin/config/development/generate/menu'] = array(
    'title' => 'Generate menus',
    'description' => 'Generate a given number of menus and menu links. Optionally delete current menus.',
    'route_name' => 'devel_generate.menu',
  );

  return $items;
}

/**
 * Implements hook_node_insert().
 * Inserts nodes properly based on generation options.
 *
 * @param $node
 *  The base node created on submit. Inspects $node->devel_generate.
 */
function devel_generate_node_insert(EntityInterface $node) {
  if (isset($node->devel_generate)) {
    $results = $node->devel_generate;

    if (!empty($results['max_comments'])) {
      // Disable entity statistics for comments created as it tries to insert
      // them twice.
      \Drupal::state()->set('comment.maintain_entity_statistics', FALSE);
      $instances = Field::fieldInfo()->getBundleInstances($node->entityType(), $node->bundle());
      foreach ($instances as $instance) {
        $field = $instance->getField();
        if ($field->getType() == 'comment') {
          devel_generate_add_comments($node, $field, $results['users'], $results['max_comments'], $results['title_length']);
        }
      }
      \Drupal::state()->set('comment.maintain_entity_statistics', TRUE);
    }


    // Add an url alias. Cannot happen before save because we don't know the nid.
    if (!empty($results['add_alias'])) {
      $path = array(
        'source' => 'node/' . $node->id(),
        'alias' => 'node-' . $node->id() . '-' . $node->bundle(),
      );
      drupal_container()->get('path.crud')->save($path['source'], $path['alias']);
    }

    // Add node statistics.
    if (!empty($results['add_statistics']) && module_exists('statistics')) {
      devel_generate_add_statistics($node);
    }
  }
}

/**
 * Set a message for either drush or the web interface.
 *
 * @param $msg
 *  The message to display.
 * @param $type
 *  The message type, as defined by drupal_set_message().
 *
 * @return
 *  Context-appropriate message output.
 */
function devel_generate_set_message($msg, $type = 'status') {
  $function  = function_exists('drush_log') ? 'drush_log' : 'drupal_set_message';
  $function($msg, $type);
}
