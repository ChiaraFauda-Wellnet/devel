<?php



// devel_template_log()

/**
 * Implementation of hook_menu().
 */
function devel_themer_menu() {
  $items = array();
  
  $items['admin/settings/devel_themer'] = array(
    'title' => 'Devel Themer',
    'description' =>  t('Display or hide the textual template log'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devel_themer_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM
  );
  return $items;
}

function devel_themer_admin_settings() {
  $form['devel_themer_log'] = array('#type' => 'checkbox',
    '#title' => t('Display theme log'),
    '#default_value' => variable_get('devel_themer_log', FALSE),
    '#description' => t('Display the list of theme templates and theme functions which could have been be used for a given page. The one that was actually used is bolded. This is the same data as the represented in the popup, but all calls are listed in chronological order and can alternately be sorted by time.'),
  );
  return system_settings_form($form);
}


function devel_themer_init() {
  if (user_access('access devel information')) {
    $path = drupal_get_path('module', 'devel_themer');
    drupal_add_css($path .'/devel_themer.css');
    drupal_add_js($path .'/devel_themer.js');
    drupal_add_js($path .'/jquery-ui-drag.min.js');
    devel_themer_popup();

    if (!devel_silent() && variable_get('devel_themer_log', FALSE)) {
      register_shutdown_function('devel_themer_shutdown');
    }
  }
}

function devel_themer_shutdown() {
  print devel_themer_log();
}

/**
 * An implementation of hook_theme_registry_alter()
 * Iterate over theme registry, injecting our catch function into every theme function.
 *
 * @return void
 **/
function devel_themer_theme_registry_alter($theme_registry) {
  foreach ($theme_registry as $hook => $data) {
    if (isset($data['function'])) {
      // For intercepting theme functions not connected to template files.
      // Copy over original registry of the hook so it can be caught later.
      $theme_registry[$hook]['devel'] = $theme_registry[$hook];
      // Replace the defaults to be intercepted.
      $theme_registry[$hook]['function'] = 'devel_catch_theme_function';
      $theme_registry[$hook]['type'] = 'module';
      $theme_registry[$hook]['theme path'] = drupal_get_path('module', 'devel_themer');
    }
  }
}

/**
 * Show all theme templates and functions that could have been used on this page.
 *
 * Not currently used.
 **/
function devel_themer_log() {
  $extension = devel_get_theme_extension();
  if (isset($GLOBALS['devel_theme_calls'])) {
    foreach ($GLOBALS['devel_theme_calls'] as $counter => $call) {
      $id = "devel_theme_log_link_$counter";
      $marker = "<div id=\"$id\" class=\"devel_theme_log_link\"></div>\n";

      if (count($call['candidates']) > 1) {
        $used = $call['used'];
        foreach ($call['candidates'] as $key => $value) {
          if ($call['type'] == 'tpl') {
            $test = $value. $extension == basename($used);
          }
          else {
            $test = $value == $used;
          }
          $call['candidates'][$key] = $test ? "<strong>$used</strong>" : $value;
        }
      }
      $name = $call['type'] == 'func' ? $call['name']. '()' : $call['name']. $extension;
      $rows[] = array($call['time'], $marker. $name, implode(', ', $call['candidates']));
    }
    $header = array('Time (ms)', 'Template/Function', "Candidate template files or function names");
    $output = theme('table', $header, $rows);
    return $output;
  }
}

// Would be nice if theme() broke this into separate function so we don't copy logic here. this one is better - has cache
function devel_get_theme_extension() {
  global $theme_engine;
  static $extension = NULL;

  if (!$extension) {
    $extension_function = $theme_engine .'_extension';
    if (function_exists($extension_function)) {
      $extension = $extension_function();
    }
    else {
      $extension = '.tpl.php';
    }
  }
  return $extension;
}

/**
 * Log template file suggestions into a $GLOBAL.
*/
function devel_themer_preprocess($vars, $hook) {
  $counter = devel_counter();
  $GLOBALS['devel_theme_calls'][$counter] = array(
    'name' => $hook,
    'type' => 'tpl',
    'candidates' => $vars['template_files'],
  );
  // add in a 'template' file if it was declared
  if (isset($vars['template_file'])) {
    array_unshift($GLOBALS['devel_theme_calls'][$counter]['candidates'] = $vars['template_file']);
  }
  // add the plain template name
  array_unshift($GLOBALS['devel_theme_calls'][$counter]['candidates'], $hook);
}

// A wrapper function so we can know what template actually got called. Log that info in the GLOBAL for later display.
// I found no other easy way to determine this. Patches welcome.
function phptemplate_render_template($file, $variables) {
  $counter = devel_counter(FALSE);

  $timer_name = "thmr_$counter";
  timer_start($timer_name);
  $output = theme_render_template($file, $variables);
  $time = timer_stop($timer_name);
  $GLOBALS['devel_theme_calls'][$counter]['time'] = $time['time'];

  $GLOBALS['devel_theme_calls'][$counter]['used'] = $file;
  $GLOBALS['devel_theme_calls'][$counter]['args'] = $variables;

  // awful attempt to get position #2 in the assoc array $variables
  $i=0;
  foreach ($variables as $key => $var) {
    if ($i == 1) {
      $name = $key;
    }
    $i++;
  }
  list($prefix, $suffix) = devel_theme_call_marker($name, $counter, 'tpl');
  drupal_add_js(array("thmr_$counter" => array('arguments' => devel_print_object($variables, '$', FALSE), 'candidates' => array_reverse($GLOBALS['devel_theme_calls'][$counter]['candidates']), 'used' => $GLOBALS['devel_theme_calls'][$counter]['used'])), 'setting', 'header', FALSE, FALSE, FALSE);
  return $prefix. "\n  ". $output. "\n". $suffix. "\n";
}

/**
 * Intercepts theme *functions*, adds to template log, and dispatches to original theme function.
 * This function gets injected into theme registry in devel_exit().
 */
function devel_catch_theme_function() {
  static $i=0;
  $args = func_get_args();

  // Get the function that is normally called.
  $trace = debug_backtrace();
  $candidates = $trace[2]['args'][0];
  // The node form has an array of theme functions.
  if (is_array($candidates)) {
    foreach ($candidates as $func) {
      if (function_exists($func)) {
        $call_theme_func = $func;
        break;
      }
    }
  }
  else {
    $call_theme_func = $candidates;
  }

  // Get registry for the original function data.
  $theme_registry = theme_get_registry();
  $hook_registry_data = $theme_registry[$call_theme_func]['devel'];

  // Include a file if this theme function is held elsewhere. Partial copy of theme().
  if (!empty($hook_registry_data['file'])) {
    $function_file = $hook_registry_data['file'];
    if (isset($hook_registry_data['path'])) {
      $function_file = $hook_registry_data['path'] .'/'. $function_file;
    }
    include_once($function_file);
  }

  $counter = devel_counter();
  $output = NULL;
  $name = $hook_registry_data['function'];
  $skip = array('theme_hidden');

  $timer_name = "thmr_$counter";
  timer_start($timer_name);
  $return = call_user_func_array($name, $args);
  $time = timer_stop($timer_name);

  if (!empty($return)) {
    list($prefix, $suffix) = devel_theme_call_marker($name, $counter, 'func');
    $start_return = substr($return, 0, 31);
    $start_prefix = substr($prefix, 0, 31);

    // Pass the call to the original function. Wrap as needed.
    if ($start_return != $start_prefix && !in_array($name, $skip)) {
      $output = $prefix. "\n  ". $return. $suffix. "\n";
      drupal_add_js(array("thmr_$counter" => array('args' => devel_print_object($args, NULL, FALSE), 'candidates' => $candidates)), 'setting', 'header', FALSE, FALSE, FALSE);
    }
    else {
      $output = $return;
    }
  }

  // Log the call
  $GLOBALS['devel_theme_calls']["thmr_$counter"] = array(
    'name' => $name,
    'type' => 'func',
    'args' => $args,
    'empty' => empty($return),
    'time' => $time['time'],
    'used' => $call_theme_func,
    'candidates' => is_array($trace[2]['args'][0]) ? $trace[2]['args'][0] : array($call_theme_func),
  );

  return $output;
}

/**
 * An implementation of hook_footer(). Emit huge js array for the benefit of the popup.
 *
 * @return void
 **/
function devel_themer_footer() {
  drupal_add_js(array("devel_themer" => $GLOBALS['devel_theme_calls']), 'setting', 'footer', FALSE, FALSE, FALSE);
}

function devel_theme_call_marker($name, $counter, $type) {
  $id = "thmr_". $counter;
  return array("<span id=\"$id\" thmr_key=\"$name\" thmr_type=\"$type\" class=\"thmr_call\">", "</span>\n");
}

// just hand out next counter, or return current value
function devel_counter($increment = TRUE) {
  static $counter = 0;
  if ($increment) {
    $counter++;
  }
  return $counter;
}

/**
 * Return the popup template
 * placed here for easy editing
 */
function devel_themer_popup() {
  $majorver = substr(VERSION, 0, strpos(VERSION, '.'));

  // add translatable strings
  drupal_add_js(array('thmrStrings' =>
    array(
      'parents' => t('Parents: '),
      'function_called' => t('Function called: '),
      'template_called' => t('Template called: '),
      'candidate_files' => t('Candidate template files: '),
      'candidate_functions' => t('Candidate function names: '),
      'drupal_api_docs' => t('link to Drupal API documentation'),
      'function_arguments' => t('Function Arguments'),
      'template_variables' => t('Template Variables'),
      'file_used' => t('File used: '),
      'api_site' => variable_get('devel_api_site', 'http://api.drupal.org/'),
      'drupal_version' => $majorver,
    ))
    , 'setting');

  $title = t('Drupal Themer Information');
  $intro = t('Click on any element on the page to see the Drupal theme function or template that created it.');

  $popup = <<<EOT
  <div id="themer-fixeder">
  <div id="themer-relativer">
  <div id="themer-popup">
      <div class="topper">
        <span class="close">X</span> $title
      </div>
      <div id="parents" class="row">

      </div>
      <div class="info row">
        <div class="starter">$intro</div>
        <dl>
          <dt class="key-type">

          </dt>
          <dd class="key">

          </dd>
          <dt class="candidates-type">

          </dt>
          <dd class="candidates">

          </dd>
          <div class="used">
          </div>
        </dl>
      </div><!-- /info -->
      <div class="attributes row">

      </div><!-- /attributes -->
    </div><!-- /themer-popup -->
    </div>
    </div>
EOT;

  drupal_add_js(array('thmr_popup' => $popup), 'setting');

}